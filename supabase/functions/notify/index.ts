import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { Bot } from 'npm:grammy@1.19.2';
import { createClient } from 'npm:@supabase/supabase-js@2';

const TELEGRAM_BOT_TOKEN = '7586460732:AAEWcXpmrv3cNiONowaWvQ1Ivmfm886OjRo';
const TELEGRAM_CHAT_ID = '-1002507869697';
const TELEGRAM_THREAD_ID = '162';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info, Apikey'
};

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') || '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
);

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      status: 204,
      headers: corsHeaders 
    });
  }

  if (req.method !== 'POST') {
    return new Response(
      JSON.stringify({ error: 'Method not allowed' }), 
      { status: 405, headers: corsHeaders }
    );
  }

  try {
    const body = await req.json();
    console.log('Received request body:', body);

    const { type = 'appointment' } = body;

    let message: string;

    if (type === '–û—Ç–∑—ã–≤') {
      const { name, phone, service, rating, review } = body;

      if (!name || !rating || !review) {
        console.error('Missing required fields for review:', { name, rating, review });
        return new Response(
          JSON.stringify({ error: 'Missing required fields for review' }), 
          { status: 400, headers: corsHeaders }
        );
      }

      message = [
        `‚≠ê *–ù–û–í–´–ô –û–¢–ó–´–í –û –ö–õ–ò–ù–ò–ö–ï*`,
        ``,
        `üë§ *–ò–º—è*: ${name}`,
        phone ? `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${phone}` : null,
        service ? `ü¶∑ *–£—Å–ª—É–≥–∞*: ${service}` : null,
        `‚≠ê *–û—Ü–µ–Ω–∫–∞*: ${rating}/5`,
        ``,
        `üí¨ *–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞*:`,
        `"${review}"`,
        ``,
        `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: –°–∞–π—Ç - –§–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–æ–≤`,
        `‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏*: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Barnaul' })}`,
        ``,
        `‚ÑπÔ∏è *–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Å–∞–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É*`
      ].filter(Boolean).join('\n');
    } else if (type === '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏') {
      const { name, phone, email, gender } = body;

      if (!name || !phone || !email || !gender) {
        console.error('Missing required fields:', { name, phone, email, gender });
        return new Response(
          JSON.stringify({ error: 'Missing required fields for loyalty card' }), 
          { status: 400, headers: corsHeaders }
        );
      }

      message = [
        `üéØ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–ê–†–¢–£ –õ–û–Ø–õ–¨–ù–û–°–¢–ò*`,
        ``,
        `üë§ *–ò–º—è*: ${name}`,
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${phone}`,
        `üìß *Email*: ${email}`,
        `üë• *–ü–æ–ª*: ${gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}`,
        ``,
        `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: –°–∞–π—Ç - –§–æ—Ä–º–∞ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`,
        `‚è∞ *–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Barnaul' })}`
      ].join('\n');
    } else if (type === '–ó–∞–∫–∞–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞') {
      const { customer_name, customer_phone, customer_email, items, subtotal, discount, total, promo_code, is_gift, notifications } = body;

      if (!customer_name || !customer_phone || !items || !Array.isArray(items)) {
        console.error('Missing required fields for marketplace order:', { customer_name, customer_phone, items });
        return new Response(
          JSON.stringify({ error: 'Missing required fields for marketplace order' }), 
          { status: 400, headers: corsHeaders }
        );
      }

      const itemsList = items.map(item => `‚Ä¢ ${item.name} √ó ${item.quantity} = ${(item.price * item.quantity).toLocaleString()} ‚ÇΩ`).join('\n');

      message = [
        `üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó –ò–ó –ú–ê–ì–ê–ó–ò–ù–ê*`,
        ``,
        `üë§ *–ö–ª–∏–µ–Ω—Ç*: ${customer_name}`,
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${customer_phone}`,
        customer_email ? `üìß *Email*: ${customer_email}` : null,
        ``,
        `üì¶ *–ó–∞–∫–∞–∑*:`,
        itemsList,
        ``,
        `üí∞ *–°—É–º–º–∞*: ${subtotal.toLocaleString()} ‚ÇΩ`,
        discount > 0 ? `üí∏ *–°–∫–∏–¥–∫–∞*: ${discount.toLocaleString()} ‚ÇΩ` : null,
        promo_code ? `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥*: ${promo_code}` : null,
        `üí≥ *–ö –æ–ø–ª–∞—Ç–µ*: ${total.toLocaleString()} ‚ÇΩ`,
        ``,
        is_gift ? `üéÅ *–ü–æ–¥–∞—Ä–æ–∫*: –î–∞` : null,
        notifications ? `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*: –î–∞` : `üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*: –ù–µ—Ç`,
        ``,
        `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: –°–∞–π—Ç - –ú–∞–≥–∞–∑–∏–Ω`,
        `‚è∞ *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞*: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Barnaul' })}`,
        ``,
        `‚ÑπÔ∏è *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞*`
      ].filter(Boolean).join('\n');
    } else if (type === '–ê–±–æ–Ω–µ–º–µ–Ω—Ç "5+2"') {
      const { name, phone, email } = body;

      if (!name || !phone || !email) {
        console.error('Missing required fields for subscription:', { name, phone, email });
        return new Response(
          JSON.stringify({ error: 'Missing required fields for subscription' }), 
          { status: 400, headers: corsHeaders }
        );
      }

      message = [
        `üí≥ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ê–ë–û–ù–ï–ú–ï–ù–¢ "5+2"*`,
        ``,
        `üë§ *–ò–º—è*: ${name}`,
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${phone}`,
        `üìß *Email*: ${email}`,
        ``,
        `üí∞ *–ê–±–æ–Ω–µ–º–µ–Ω—Ç*: "5+2" (28 600‚ÇΩ)`,
        `üìã *–í–∫–ª—é—á–∞–µ—Ç*:`,
        `‚Ä¢ 5 –ª–µ—á–µ–±–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ —Å –ø–ª–æ–º–±–∏—Ä–æ–≤–∫–æ–π`,
        `‚Ä¢ 2 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å—Ç–∫–∏ AirFlow`,
        `‚Ä¢ 2 –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–∞`,
        `‚Ä¢ –°–∫–∏–¥–∫–∞ 5% –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–∫–∏`,
        ``,
        `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: –°–∞–π—Ç - –§–æ—Ä–º–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞`,
        `‚è∞ *–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Barnaul' })}`,
        ``,
        `‚ÑπÔ∏è *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞*`
      ].join('\n');
    } else if (type === '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É') {
      const { name, position, experience, phone, email, motivation } = body;

      if (!name || !position || !phone || !email || !motivation) {
        console.error('Missing required fields for job application:', { name, position, phone, email, motivation });
        return new Response(
          JSON.stringify({ error: 'Missing required fields for job application' }), 
          { status: 400, headers: corsHeaders }
        );
      }

      const positionNames = {
        'orthodontist': '–í—Ä–∞—á-–æ—Ä—Ç–æ–¥–æ–Ω—Ç',
        'implantologist': '–í—Ä–∞—á-–∏–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥',
        'pediatric': '–î–µ—Ç—Å–∫–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥',
        'therapist': '–í—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç',
        'surgeon': '–í—Ä–∞—á-—Ö–∏—Ä—É—Ä–≥',
        'assistant': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–∞—á–∞',
        'administrator': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'other': '–î—Ä—É–≥–∞—è –ø–æ–∑–∏—Ü–∏—è'
      };

      const experienceNames = {
        'no-experience': '–ë–µ–∑ –æ–ø—ã—Ç–∞',
        '1-3': '1-3 –≥–æ–¥–∞',
        '3-5': '3-5 –ª–µ—Ç',
        '5+': '–ë–æ–ª–µ–µ 5 –ª–µ—Ç'
      };

      message = [
        `üë®‚Äç‚öïÔ∏è *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ê–ë–û–¢–£*`,
        ``,
        `üë§ *–ò–º—è*: ${name}`,
        `üíº *–ü–æ–∑–∏—Ü–∏—è*: ${positionNames[position as keyof typeof positionNames] || position}`,
        experience ? `üìà *–û–ø—ã—Ç*: ${experienceNames[experience as keyof typeof experienceNames] || experience}` : null,
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${phone}`,
        `üìß *Email*: ${email}`,
        ``,
        `üí≠ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è*:`,
        `"${motivation}"`,
        ``,
        `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: –°–∞–π—Ç - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–∞–Ω–¥—ã`,
        `‚è∞ *–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Barnaul' })}`,
        ``,
        `‚ÑπÔ∏è *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è*`
      ].filter(Boolean).join('\n');
    } else {
      const { name, phone, service, date, time, comment, doctor } = body;

      if (!name || !phone || !service) {
        console.error('Missing required fields:', { name, phone, service });
        return new Response(
          JSON.stringify({ error: 'Missing required fields for appointment' }),
          { status: 400, headers: corsHeaders }
        );
      }

      const { data: appointmentData, error: appointmentError } = await supabase
        .from('appointments')
        .insert({
          service_id: service,
          doctor_id: doctor || null,
          appointment_date: date || null,
          appointment_time: time || null,
          client_name: name,
          client_phone: phone,
          client_email: null,
          status: 'pending'
        })
        .select()
        .single();

      if (appointmentError) {
        console.error('Error saving appointment to DB:', appointmentError);
      } else {
        console.log('Appointment saved to DB:', appointmentData);
      }

      message = [
        `üÜï *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–ò–Å–ú*`,
        ``,
        `üìù *–£—Å–ª—É–≥–∞*: ${service}`,
        doctor ? `üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á*: ${doctor}` : null,
        `üë§ *–ò–º—è*: ${name}`,
        `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${phone}`,
        date ? `üìÖ *–î–∞—Ç–∞*: ${date}` : null,
        time ? `‚è∞ *–í—Ä–µ–º—è*: ${time}` : null,
        comment ? `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: ${comment}` : null,
        ``,
        `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫*: –°–∞–π—Ç - –§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏`,
        `‚è∞ *–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Barnaul' })}`
      ].filter(Boolean).join('\n');
    }

    console.log('Sending Telegram message:', message);

    const bot = new Bot(TELEGRAM_BOT_TOKEN);

    try {
      const result = await bot.api.sendMessage(TELEGRAM_CHAT_ID, message, {
        parse_mode: 'Markdown',
        message_thread_id: parseInt(TELEGRAM_THREAD_ID)
      });

      console.log('Telegram API response:', result);

      return new Response(
        JSON.stringify({ success: true }), 
        { headers: corsHeaders }
      );
    } catch (error) {
      console.error('Telegram API Error:', error);
      
      return new Response(
        JSON.stringify({ 
          error: 'Failed to send Telegram message',
          details: error instanceof Error ? error.message : 'Unknown error'
        }), 
        { status: 500, headers: corsHeaders }
      );
    }
  } catch (error) {
    console.error('Error processing request:', error);
    
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { status: 500, headers: corsHeaders }
    );
  }
});